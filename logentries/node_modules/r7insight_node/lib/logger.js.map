{"version":3,"file":"logger.js","sources":["../src/logger.js"],"sourcesContent":["import _ from 'lodash';\nimport semver from 'semver';\nimport net from 'net';\nimport tls from 'tls';\nimport urlUtil from 'url';\nimport { Writable } from 'stream';\nimport codependency from 'codependency';\nimport reconnectCore from 'reconnect-core';\nimport * as defaults from './defaults';\nimport * as levelUtil from './levels';\nimport text from './text';\nimport build from './serialize';\nimport {\n    BadOptionsError,\n    LogentriesError\n} from './error';\nimport RingBuffer from './ringbuffer';\nimport BunyanStream from './bunyanstream';\n\n// patterns\nconst newline = /\\n/g;\nconst tokenPattern = /[a-f\\d]{8}-([a-f\\d]{4}-){3}[a-f\\d]{12}/;\n\n// exposed Logger events\nconst errorEvent = 'error';\nconst logEvent = 'log';\nconst connectedEvent = 'connected';\nconst disconnectedEvent = 'disconnected';\nconst timeoutEvent = 'timed out';\nconst drainWritableEvent = 'drain';\nconst finishWritableEvent = 'finish';\nconst pipeWritableEvent = 'pipe';\nconst unpipeWritableEvent = 'unpipe';\nconst bufferDrainEvent = 'buffer drain';\n\n/**\n * Append log string to provided token.\n *\n * @param log\n * @param token\n */\nconst finalizeLogString = (log, token) =>\n    `${token} ${log.toString().replace(newline, '\\u2028')}\\n`;\n\n/**\n * Get console method corresponds to lvl\n *\n * @param lvl\n * @returns {*}\n */\nconst getConsoleMethod = lvl => {\n  if (lvl > 3) {\n    return 'error';\n  } else if (lvl === 3) {\n    return 'warn';\n  }\n  return 'log';\n};\n\n/**\n * Get a new prop name that does not exist in the log.\n *\n * @param log\n * @param prop\n * @returns safeProp\n */\nconst getSafeProp = (log, prop) => {\n  let safeProp = prop;\n  while (safeProp in log) {\n    safeProp = `_${safeProp}`;\n  }\n  return safeProp;\n};\n\nconst requirePeer = codependency.register(module);\n\n\n/**\n * Logger class that handles parsing of logs and sending logs to Logentries.\n */\nclass Logger extends Writable {\n  constructor(opts) {\n    super({\n      objectMode: true\n    });\n\n    // Sanity checks\n    if (_.isUndefined(opts)) {\n      throw new BadOptionsError(opts, text.noOptions());\n    }\n\n    if (!_.isObject(opts)) {\n      throw new BadOptionsError(opts, text.optionsNotObj(typeof opts));\n    }\n\n    if (_.isUndefined(opts.region) && _.isUndefined(opts.host)) {\n      throw new BadOptionsError(opts, text.noRegion(opts.region));\n    }\n\n    if (!_.isUndefined(opts.region) && !_.isUndefined(opts.host)) {\n      throw new BadOptionsError(opts, text.noRegionAndHost(opts.region));\n    }\n\n    if (_.isUndefined(opts.token)) {\n      throw new BadOptionsError(opts, text.noToken());\n    }\n\n    if (!_.isString(opts.token) || !tokenPattern.test(opts.token)) {\n      throw new BadOptionsError(opts, text.invalidToken(opts.token));\n    }\n\n    // Log method aliases\n    this.levels = levelUtil.normalize(opts);\n\n    for (const lvlName of this.levels) {\n      if (lvlName in this) {\n        throw new BadOptionsError(opts, text.levelConflict(lvlName));\n      }\n\n      Object.defineProperty(this, lvlName, {\n        enumerable: true,\n        writable: false,\n        value() {\n          this.log.apply(this, [lvlName, ...arguments]);\n        }\n      });\n    }\n\n    // boolean options\n    this.secure = opts.secure === undefined ? defaults.secure : opts.secure;\n    this.debugEnabled = opts.debug === undefined ? defaults.debug : opts.debug;\n    this.json = opts.json;\n    this.flatten = opts.flatten;\n    this.flattenArrays = 'flattenArrays' in opts ? opts.flattenArrays : opts.flatten;\n    this.console = opts.console;\n    this.withLevel = 'withLevel' in opts ? opts.withLevel : true;\n    this.withStack = opts.withStack;\n    this.timestamp = opts.timestamp || false;\n\n    // string or numeric options\n    this.bufferSize = opts.bufferSize || defaults.bufferSize;\n    this.port = opts.port || (this.secure ? defaults.portSecure : defaults.port);\n    this.host = opts.host || `${opts.region}.${opts.baseHost || defaults.baseHost}`;\n    this.minLevel = opts.minLevel;\n    this.replacer = opts.replacer;\n    this.inactivityTimeout = opts.inactivityTimeout || defaults.inactivityTimeout;\n    this.disableTimeout = opts.disableTimeout;\n    this.token = opts.token;\n    this.reconnectInitialDelay = opts.reconnectInitialDelay || defaults.reconnectInitialDelay;\n    this.reconnectMaxDelay = opts.reconnectMaxDelay || defaults.reconnectMaxDelay;\n    this.reconnectBackoffStrategy =\n        opts.reconnectBackoffStrategy || defaults.reconnectBackoffStrategy;\n\n    if (!this.debugEnabled) {\n      // if there is no debug set, empty logger should be used\n      this.debugLogger = {\n        log: () => {\n        }\n      };\n    } else {\n      this.debugLogger =\n          (opts.debugLogger && opts.debugLogger.log) ? opts.debugLogger : defaults.debugLogger;\n    }\n\n    const isSecure = this.secure;\n    this.ringBuffer = new RingBuffer(this.bufferSize);\n    this.reconnect = reconnectCore(function initialize() {\n      let connection;\n      const args = [].slice.call(arguments);\n      if (isSecure) {\n        connection = tls.connect.apply(tls, args, () => {\n          if (!connection.authorized) {\n            const errMsg = connection.authorizationError;\n            this.emit(new LogentriesError(text.authError(errMsg)));\n          } else if (tls && tls.CleartextStream && connection instanceof tls.CleartextStream) {\n            this.emit('connect');\n          }\n        });\n      } else {\n        connection = net.connect.apply(null, args);\n      }\n      if (!opts.disableTimeout) {\n        connection.setTimeout(opts.inactivityTimeout || defaults.inactivityTimeout);\n      }\n      return connection;\n    });\n\n    // RingBuffer emits buffer shift event, meaning we are discarding some data!\n    this.ringBuffer.on('buffer shift', () => {\n      this.debugLogger.log('Buffer is full, will be shifting records until buffer is drained.');\n    });\n\n    this.on(bufferDrainEvent, () => {\n      this.debugLogger.log('RingBuffer drained.');\n      this.drained = true;\n    });\n\n    this.on(timeoutEvent, () => {\n      if (this.drained) {\n        this.debugLogger.log(\n            `Socket was inactive for ${this.inactivityTimeout / 1000} seconds. Destroying.`);\n        this.closeConnection();\n      } else {\n        this.debugLogger.log('Inactivity timeout event emitted but buffer was not drained.');\n        this.once(bufferDrainEvent, () => {\n          this.debugLogger.log('Buffer drain event emitted for inactivity timeout.');\n          this.closeConnection();\n        });\n      }\n    });\n  }\n\n  /**\n   * Override Writable _write method.\n   * Get the connection promise .then write the next log on the ringBuffer\n   * to Logentries connection when its available\n   */\n  _write(ch, enc, cb) {\n    this.drained = false;\n    this.connection.then(conn => {\n      const record = this.ringBuffer.read();\n      if (record) {\n        // we are checking the buffer state here just after conn.write()\n        // to make sure the last event is sent to socket.\n        if (this.ringBuffer.isEmpty()) {\n          conn.write(record, () => {\n            process.nextTick(() => {\n              this.emit(bufferDrainEvent);\n              // this event is DEPRECATED - will be removed in next major release.\n              // new users should use 'buffer drain' event instead.\n              this.emit('connection drain');\n            });\n          });\n        } else {\n          conn.write(record);\n        }\n      } else {\n        this.debugLogger.log('This should not happen. Read from ringBuffer returned null.');\n      }\n      cb();\n    }).catch(err => {\n      this.emit(errorEvent, err);\n      this.debugLogger.log(`Error: ${err}`);\n      cb();\n    });\n  }\n\n  setDefaultEncoding() { /* no. */\n  }\n\n  /**\n   * Finalize the log and write() to Logger stream\n   * @param lvl\n   * @param log\n   */\n  log(lvl, log) {\n    let modifiedLevel = lvl;\n    let modifiedLog = log;\n    // lvl is optional\n    if (modifiedLog === undefined) {\n      modifiedLog = modifiedLevel;\n      modifiedLevel = null;\n    }\n\n    let lvlName;\n\n    if (modifiedLevel || modifiedLevel === 0) {\n      [modifiedLevel, lvlName] = this.toLevel(modifiedLevel);\n\n      // If lvl is present, it must be recognized\n      if (!modifiedLevel && modifiedLevel !== 0) {\n        this.emit(errorEvent, new LogentriesError(text.unknownLevel(modifiedLevel)));\n        return;\n      }\n\n      // If lvl is below minLevel, it is dismissed\n      if (modifiedLevel < this.minLevel) {\n        return;\n      }\n    }\n\n    // If log is an array, it is treated as a collection of log events\n    if (_.isArray(modifiedLog)) {\n      if (modifiedLog.length) {\n        for (const $modifiedLog of modifiedLog) this.log(modifiedLevel, $modifiedLog);\n      } else {\n        this.emit(errorEvent, new LogentriesError(text.noLogMessage()));\n      }\n      return;\n    }\n\n    // If log is an object, it is serialized to string and may be augmented\n    // with timestamp and level. For strings, these may be prepended.\n    if (_.isObject(modifiedLog)) {\n      let safeTime;\n      let safeLevel;\n\n      if (this.timestamp) {\n        safeTime = getSafeProp(modifiedLog, 'time');\n        modifiedLog[safeTime] = new Date();\n      }\n\n      if (this.withLevel && lvlName) {\n        safeLevel = getSafeProp(modifiedLog, 'level');\n        modifiedLog[safeLevel] = lvlName;\n      }\n\n      modifiedLog = this._serialize(modifiedLog);\n\n      if (!modifiedLog) {\n        this.emit(errorEvent, new LogentriesError(text.serializedEmpty()));\n        return;\n      }\n\n      if (this.console) {\n        console[getConsoleMethod(modifiedLevel)](JSON.parse(modifiedLog));\n      }\n\n      if (safeTime) delete modifiedLog[safeTime];\n      if (safeLevel) delete modifiedLog[safeLevel];\n    } else {\n      if (_.isEmpty(modifiedLog)) {\n        this.emit(errorEvent, new LogentriesError(text.noLogMessage()));\n        return;\n      }\n\n      modifiedLog = [modifiedLog.toString()];\n\n      if (this.withLevel && lvlName) {\n        modifiedLog.unshift(lvlName);\n      }\n\n      if (this.timestamp) {\n        modifiedLog.unshift((new Date()).toISOString());\n      }\n\n      modifiedLog = modifiedLog.join(' ');\n\n      if (this.console) {\n        console[getConsoleMethod(modifiedLevel)](modifiedLog);\n      }\n    }\n\n    this.emit(logEvent, modifiedLog);\n\n    // if RingBuffer.write returns false, don't create any other write request for\n    // the writable stream to avoid memory leak this means there are already 'bufferSize'\n    // of write events in the writable stream and that's what we want.\n    if (this.ringBuffer.write(finalizeLogString(modifiedLog, this.token))) {\n      this.write();\n    }\n  }\n\n  /**\n   * Close connection via reconnection\n   */\n  closeConnection() {\n    this.debugLogger.log('Closing retry mechanism along with its connection.');\n    if (!this.reconnection) {\n      this.debugLogger.log('No reconnection instance found. Returning.');\n      return;\n    }\n    // this makes sure retry mechanism and connection will be closed.\n    this.reconnection.disconnect();\n    this.connection = null;\n  }\n\n  // Private methods\n  toLevel(val) {\n    let num;\n\n    if (levelUtil.isNumberValid(val)) {\n      num = parseInt(val, 10); // -0\n    } else {\n      num = this.levels.indexOf(val);\n    }\n\n    const name = this.levels[num];\n\n    return name ? [num, name] : [];\n  }\n\n  get reconnect() {\n    return this._reconnect;\n  }\n\n  set reconnect(func) {\n    this._reconnect = func;\n  }\n\n  get connection() {\n    // The $connection property is a promise. On error, manual close, or\n    // inactivityTimeout, it deletes itself.\n    if (this._connection) {\n      return this._connection;\n    }\n\n    this.debugLogger.log('No connection exists. Creating a new one.');\n    // clear the state of previous reconnection and create a new one with a new connection promise.\n    if (this.reconnection) {\n      // destroy previous reconnection instance if it exists.\n      this.reconnection.disconnect();\n      this.reconnection = null;\n    }\n\n    this.reconnection = this.reconnect({\n      // all options are optional\n      initialDelay: this.reconnectInitialDelay,\n      maxDelay: this.reconnectMaxDelay,\n      strategy: this.reconnectBackoffStrategy,\n      failAfter: Infinity,\n      randomisationFactor: 0,\n      immediate: false\n    });\n\n    this.connection = new Promise((resolve) => {\n      const connOpts = {\n        host: this.host,\n        port: this.port\n      };\n\n      // reconnection listeners\n      this.reconnection.on('connect', (connection) => {\n        this.debugLogger.log('Connected');\n        this.emit(connectedEvent);\n\n        // connection listeners\n        connection.on('timeout', () => {\n          this.emit(timeoutEvent);\n        });\n        resolve(connection);\n      });\n\n      this.reconnection.on('reconnect', (n, delay) => {\n        if (n > 0) {\n          this.debugLogger.log(`Trying to reconnect. Times: ${n} , previous delay: ${delay}`);\n        }\n      });\n\n      this.reconnection.once('disconnect', () => {\n        this.debugLogger.log('Socket was disconnected');\n        this.connection = null;\n        this.emit(disconnectedEvent);\n      });\n\n      this.reconnection.on('error', (err) => {\n        this.debugLogger.log(`Error occurred during connection: ${err}`);\n      });\n\n      // now try to connect\n      this.reconnection.connect(connOpts);\n    });\n    return this.connection;\n  }\n\n  set connection(obj) {\n    this._connection = obj;\n  }\n\n  get reconnection() {\n    return this._reconnection;\n  }\n\n  set reconnection(func) {\n    this._reconnection = func;\n  }\n\n  get debugEnabled() {\n    return this._debugEnabled;\n  }\n\n  set debugEnabled(val) {\n    this._debugEnabled = !!val;\n  }\n\n  get debugLogger() {\n    return this._debugLogger;\n  }\n\n  set debugLogger(func) {\n    this._debugLogger = func;\n  }\n\n  get ringBuffer() {\n    return this._ringBuffer;\n  }\n\n  set ringBuffer(obj) {\n    this._ringBuffer = obj;\n  }\n\n  get secure() {\n    return this._secure;\n  }\n\n  set secure(val) {\n    this._secure = !!val;\n  }\n\n  get token() {\n    return this._token;\n  }\n\n  set token(val) {\n    this._token = val;\n  }\n\n  get bufferSize() {\n    return this._bufferSize;\n  }\n\n  set bufferSize(val) {\n    this._bufferSize = val;\n  }\n\n  get console() {\n    return this._console;\n  }\n\n  set console(val) {\n    this._console = !!val;\n  }\n\n  get serialize() {\n    return this._serialize;\n  }\n\n  set serialize(func) {\n    this._serialize = func;\n  }\n\n  get flatten() {\n    return this._flatten;\n  }\n\n  set flatten(val) {\n    this._flatten = !!val;\n    this.serialize = build(this);\n  }\n\n  get flattenArrays() {\n    return this._flattenArrays;\n  }\n\n  set flattenArrays(val) {\n    this._flattenArrays = !!val;\n    this.serialize = build(this);\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(val) {\n    const host = val.replace(/^https?:\\/\\//, '');\n    const url = urlUtil.parse(`http://${host}`);\n    this._host = url.hostname;\n    if (url.port) this.port = url.port;\n  }\n\n  get json() {\n    return this._json;\n  }\n\n  set json(val) {\n    this._json = val;\n  }\n\n  get reconnectMaxDelay() {\n    return this._reconnectMaxDelay;\n  }\n\n  set reconnectMaxDelay(val) {\n    this._reconnectMaxDelay = val;\n  }\n\n  get reconnectInitialDelay() {\n    return this._reconnectInitialDelay;\n  }\n\n  set reconnectInitialDelay(val) {\n    this._reconnectInitialDelay = val;\n  }\n\n  get reconnectBackoffStrategy() {\n    return this._reconnectBackoffStrategy;\n  }\n\n  set reconnectBackoffStrategy(val) {\n    this._reconnectBackoffStrategy = val;\n  }\n\n  get minLevel() {\n    return this._minLevel;\n  }\n\n  set minLevel(val) {\n    const [num] = this.toLevel(val);\n\n    this._minLevel = _.isNumber(num) ? num : 0;\n  }\n\n  get port() {\n    return this._port;\n  }\n\n  set port(val) {\n    const port = parseFloat(val);\n    if (Number.isInteger(port) && _.inRange(port, 65536)) this._port = port;\n  }\n\n  get replacer() {\n    return this._replacer;\n  }\n\n  set replacer(val) {\n    this._replacer = _.isFunction(val) ? val : undefined;\n    this.serialize = build(this);\n  }\n\n  get inactivityTimeout() {\n    return this._inactivityTimeout;\n  }\n\n  set inactivityTimeout(val) {\n    if (Number.isInteger(val) && val >= 0) {\n      this._inactivityTimeout = parseInt(val, 10);\n    }\n\n    if (!_.isNumber(this._inactivityTimeout)) {\n      this._inactivityTimeout = defaults.inactivityTimeout;\n    }\n  }\n\n  get timestamp() {\n    return this._timestamp;\n  }\n\n  set timestamp(val) {\n    this._timestamp = !!val;\n  }\n\n  get withLevel() {\n    return this._withLevel;\n  }\n\n  set withLevel(val) {\n    this._withLevel = !!val;\n  }\n\n  get withStack() {\n    return this._withStack;\n  }\n\n  set withStack(val) {\n    this._withStack = !!val;\n    this.serialize = build(this);\n  }\n\n  get levels() {\n    return this._levels && this._levels.slice();\n  }\n\n  set levels(val) {\n    this._levels = val;\n  }\n\n  get disableTimeout() {\n    return this._disableTimeout;\n  }\n\n  set disableTimeout(val) {\n    this._disableTimeout = !!val;\n  }\n\n  // Deprecated (to support migrants from r7insight_node)\n  level(name) {\n    console.warn(text.deprecatedLevelMethod());\n    if (~this.levels.indexOf(name)) this.minLevel = name;\n  }\n\n  // static methods\n  static winston() {\n    console.warn(text.deprecatedWinstonMethod());\n  }\n\n  /**\n   * Prepare the winston transport\n   * @param winston\n   */\n  static provisionWinston(winston) {\n    if (winston.transports.Logentries) return;\n\n    const Transport = winston.Transport;\n\n    class LogentriesTransport extends Transport {\n      constructor(opts) {\n        super(opts);\n        this.json = opts.json;\n        this.name = 'logentries';\n\n        const transportOpts = _.clone(opts || {});\n\n        transportOpts.minLevel =\n            transportOpts.minLevel || transportOpts.level || this.tempLevel || 0;\n\n        transportOpts.levels = transportOpts.levels || winston.levels;\n        if (semver.satisfies(winston.version, '>=2.0.0')) {\n          // Winston and Logengries levels are reversed\n          // ('error' level is 0 for Winston and 5 for Logentries)\n          // If the user provides custom levels we assue they are\n          // using winston standard\n          const levels = transportOpts.levels;\n          const values = _.values(levels).reverse();\n          transportOpts.levels = {};\n          _.keys(levels).forEach((k, i) => {\n            transportOpts.levels[k] = values[i];\n          });\n        }\n\n        this.tempLevel = null;\n        this.logger = new Logger(transportOpts);\n        this.logger.on('error', err => this.emit(err));\n      }\n\n      log(lvl, msg, meta, cb) {\n        if (this.json) {\n          const message = {\n            message: msg\n          };\n          if (!_.isEmpty(meta)) {\n            if (_.isObject(meta)) {\n              _.defaults(message, meta);\n            } else {\n              message.meta = meta;\n            }\n          }\n\n          this.logger.log(lvl, message);\n        } else {\n          let message = msg;\n          if (!_.isEmpty(meta) || _.isError(meta)) {\n            if (_.isString(message)) {\n              message += ` ${this.logger.serialize(meta)}`;\n            } else if (_.isObject(message)) {\n              message[getSafeProp(message, 'meta')] = meta;\n            }\n          }\n\n          this.logger.log(lvl, message);\n        }\n\n        setImmediate(cb.bind(null, null, true));\n      }\n\n      get tempLevel() {\n        return this._tempLevel;\n      }\n\n      set tempLevel(val) {\n        this._tempLevel = val;\n      }\n\n      get logger() {\n        return this._logger;\n      }\n\n      set logger(obj) {\n        this._logger = obj;\n      }\n\n      get level() {\n        const [, lvlName] =\n            this.logger.toLevel(this.logger.minLevel);\n        return lvlName;\n      }\n\n      set level(val) {\n        if (!this.logger) {\n          this.tempLevel = val;\n        } else {\n          this.logger.minLevel = val;\n        }\n      }\n\n      get levels() {\n        return this.logger.levels.reduce((acc, lvlName, lvlNum) => {\n          const newAcc = acc;\n          newAcc[lvlName] = lvlNum;\n          return newAcc;\n        }, {});\n      }\n    }\n\n    /* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n    winston.transports.Logentries = LogentriesTransport;\n  }\n\n  /**\n   * Prepare a BunyanStream.\n   * @param opts\n   * @returns {{level: *, name: string, stream: BunyanStream, type: string}}\n   */\n  static bunyanStream(opts) {\n    const stream = new BunyanStream(opts);\n    const [, level] = stream.logger.toLevel(stream.logger.minLevel);\n    const type = 'raw';\n    const name = 'logentries';\n\n    // Defer to Bunyan’s handling of minLevel\n    stream.logger.minLevel = 0;\n\n    return { level, name, stream, type };\n  }\n}\n\n// provision winston\nconst winston = requirePeer('winston', { optional: true });\n\nif (winston) Logger.provisionWinston(winston);\n\n// Provision too the winston static versions for testing/development purposes\nconst winston1 = requirePeer('winston1', { optional: true });\nconst winston2 = requirePeer('winston2x', { optional: true });\n\nif (winston1) Logger.provisionWinston(winston1);\nif (winston2) Logger.provisionWinston(winston2);\n\nexport {\n    Logger as default,\n    errorEvent,\n    logEvent,\n    connectedEvent,\n    disconnectedEvent,\n    timeoutEvent,\n    drainWritableEvent,\n    finishWritableEvent,\n    pipeWritableEvent,\n    unpipeWritableEvent,\n    bufferDrainEvent\n};\n"],"names":["_logger","_tempLevel","bind","isError","message","meta","msg","logger","i","k","isUndefined","default","Logger","winston2","Transport","version","_reconnect","provisionWinston","winston1","disableTimeout","length","noOptions","LogentriesTransport","transportOpts","level","clone","optional","writable","type","stream","levelConflict","newAcc","parseInt","values","lvlNum","_debugLogger","acc","read","reduce","replace","safeProp","requirePeer","host","url","levels","process","tokenPattern","console","setTimeout","toLevel","once","tempLevel","forEach","reverse","keys","satisfies","timestamp","func","Logentries","transports","winston","authorized","deprecatedWinstonMethod","_disableTimeout","_levels","_withStack","reconnectMaxDelay","inRange","warn","_timestamp","_withLevel","json","minLevel","_inactivityTimeout","_replacer","isFunction","parseFloat","indexOf","_port","isNumber","_minLevel","_reconnectBackoffStrategy","_reconnectMaxDelay","_json","_reconnectInitialDelay","join","noToken","getSafeProp","hostname","_host","parse","maxDelay","_flattenArrays","serialize","_flatten","_console","_bufferSize","_token","_secure","_ringBuffer","strategy","call","num","authorizationError","obj","reconnect","finishWritableEvent","cb","_reconnection","_debugEnabled","delay","pipeWritableEvent","drainWritableEvent","n","connOpts","immediate","resolve","randomisationFactor","ringBuffer","Infinity","isSecure","failAfter","debugLogger","args","isNumberValid","initialDelay","deprecatedLevelMethod","_connection","errorEvent","name","catch","connection","toString","isArray","getConsoleMethod","timeoutEvent","prop","unknownLevel","val","reconnection","JSON","disconnect","portSecure","bufferSize","lvl","disconnectedEvent","Date","serializedEmpty","_serialize","toISOString","unshift","safeLevel","safeTime","noLogMessage","$modifiedLog","ch","bufferDrainEvent","nextTick","errMsg","newline","isEmpty","conn","write","record","then","enc","closeConnection","log","inactivityTimeout","drained","on","opts","defaults","connect","apply","emit","CleartextStream","authError","slice","arguments","initialize","secure","debugEnabled","reconnectBackoffStrategy","reconnectInitialDelay","token","replacer","region","baseHost","port","withStack","withLevel","flattenArrays","flatten","debug","undefined","lvlName","value","enumerable","levelUtil","normalize","invalidToken","isString","test","noRegionAndHost","noRegion","optionsNotObj","isObject","objectMode","register","module","finalizeLogString","unpipeWritableEvent","connectedEvent","logEvent"],"mappings":"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"}