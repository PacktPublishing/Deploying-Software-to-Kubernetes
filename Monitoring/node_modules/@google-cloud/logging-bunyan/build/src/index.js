"use strict";
/*!
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var stream_1 = require("stream");
var logging = require('@google-cloud/logging');
// Map of Stackdriver logging levels.
var BUNYAN_TO_STACKDRIVER = new Map([
    [60, 'CRITICAL'],
    [50, 'ERROR'],
    [40, 'WARNING'],
    [30, 'INFO'],
    [20, 'DEBUG'],
    [10, 'DEBUG'],
]);
/**
 * Key to use in the Bunyan payload to allow users to indicate a trace for the
 * request, and to store as an intermediate value on the log entry before it
 * gets written to the Stackdriver logging API.
 */
exports.LOGGING_TRACE_KEY = 'logging.googleapis.com/trace';
/**
 * Gets the current fully qualified trace ID when available from the
 * @google-cloud/trace-agent library in the LogEntry.trace field format of:
 * "projects/[PROJECT-ID]/traces/[TRACE-ID]".
 */
function getCurrentTraceFromAgent() {
    var agent = global._google_trace_agent;
    if (!agent || !agent.getCurrentContextId || !agent.getWriterProjectId) {
        return null;
    }
    var traceId = agent.getCurrentContextId();
    if (!traceId) {
        return null;
    }
    var traceProjectId = agent.getWriterProjectId();
    if (!traceProjectId) {
        return null;
    }
    return "projects/" + traceProjectId + "/traces/" + traceId;
}
var LoggingBunyan = /** @class */ (function (_super) {
    __extends(LoggingBunyan, _super);
    function LoggingBunyan(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, { objectMode: true }) || this;
        _this.logName = options.logName || 'bunyan_log';
        _this.resource = options.resource;
        _this.serviceContext = options.serviceContext;
        _this.stackdriverLog = logging(options).log(_this.logName, {
            removeCircular: true,
        });
        return _this;
    }
    /**
     * Convenience method that Builds a bunyan stream object that you can put in
     * the bunyan streams list.
     */
    LoggingBunyan.prototype.stream = function (level) {
        return { level: level, type: 'raw', stream: this };
    };
    /**
     * Format a bunyan record into a Stackdriver log entry.
     */
    LoggingBunyan.prototype.formatEntry_ = function (record) {
        if (typeof record === 'string') {
            throw new Error('@google-cloud/logging-bunyan only works as a raw bunyan stream type.');
        }
        // Stackdriver Log Viewer picks up the summary line from the 'message' field
        // of the payload. Unless the user has provided a 'message' property also,
        // move the 'msg' to 'message'.
        if (!record.message) {
            // If this is an error, report the full stack trace. This allows
            // Stackdriver Error Reporting to pick up errors automatically (for
            // severity 'error' or higher). In this case we leave the 'msg' property
            // intact.
            // https://cloud.google.com/error-reporting/docs/formatting-error-messages
            //
            if (record.err && record.err.stack) {
                record.message = record.err.stack;
                record.serviceContext = this.serviceContext;
            }
            else if (record.msg) {
                // Simply rename `msg` to `message`.
                record.message = record.msg;
                delete record.msg;
            }
        }
        var entryMetadata = {
            resource: this.resource,
            timestamp: record.time,
            // BUNYAN_TO_STACKDRIVER does not have index signature.
            // tslint:disable-next-line:no-any
            severity: BUNYAN_TO_STACKDRIVER[record.level],
        };
        // If the record contains a httpRequest property, provide it on the entry
        // metadata. This allows Stackdriver to use request log formatting.
        // https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#HttpRequest
        // Note that the httpRequest field must properly validate as a HttpRequest
        // proto message, or the log entry would be rejected by the API. We do no
        // validation here.
        if (record.httpRequest) {
            entryMetadata.httpRequest = record.httpRequest;
            delete record.httpRequest;
        }
        // If the record contains a labels property, promote it to the entry
        // metadata.
        // https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry
        if (record.labels) {
            entryMetadata.labels = record.labels;
            delete record.labels;
        }
        // record does not have index signature.
        // tslint:disable-next-line:no-any
        if (record[exports.LOGGING_TRACE_KEY]) {
            // tslint:disable-next-line:no-any
            entryMetadata.trace = record[exports.LOGGING_TRACE_KEY];
            // tslint:disable-next-line:no-any
            delete record[exports.LOGGING_TRACE_KEY];
        }
        return this.stackdriverLog.entry(entryMetadata, record);
    };
    // Writable.write used 'any' in function signature.
    // tslint:disable-next-line:no-any
    LoggingBunyan.prototype.write = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var record = args[0];
        var encoding = null;
        var callback;
        if (typeof args[1] === 'string') {
            encoding = args[1];
            callback = args[2];
        }
        else {
            callback = args[1];
        }
        record = Object.assign({}, record);
        // record does not have index signature.
        // tslint:disable-next-line:no-any
        if (!record[exports.LOGGING_TRACE_KEY]) {
            var trace = getCurrentTraceFromAgent();
            if (trace) {
                // tslint:disable-next-line:no-any
                record[exports.LOGGING_TRACE_KEY] = trace;
            }
        }
        if (encoding !== null) {
            return _super.prototype.write.call(this, record, encoding, callback);
        }
        else {
            return _super.prototype.write.call(this, record, callback);
        }
    };
    /**
     * Relay a log entry to the logging agent. This is called by bunyan through
     * Writable#write.
     */
    LoggingBunyan.prototype._write = function (record, encoding, callback) {
        var entry = this.formatEntry_(record);
        this.stackdriverLog.write(entry, callback);
    };
    /**
     * Relay an array of log entries to the logging agent. This is called by
     * bunyan through Writable#write.
     */
    // Writable._write used 'any' in function signature.
    LoggingBunyan.prototype._writev = function (chunks, callback) {
        var _this = this;
        var entries = chunks.map(function (request) {
            return _this.formatEntry_(request.chunk);
        });
        this.stackdriverLog.write(entries, callback);
    };
    return LoggingBunyan;
}(stream_1.Writable));
exports.LoggingBunyan = LoggingBunyan;
module.exports.BUNYAN_TO_STACKDRIVER = BUNYAN_TO_STACKDRIVER;
/**
 * Value: `logging.googleapis.com/trace`
 *
 * @name LoggingBunyan.LOGGING_TRACE_KEY
 * @type {string}
 */
module.exports.LOGGING_TRACE_KEY = exports.LOGGING_TRACE_KEY;
//# sourceMappingURL=index.js.map