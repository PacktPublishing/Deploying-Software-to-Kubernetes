/// <reference types="node" />
/*!
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Writable } from 'stream';
import * as types from './types/core';
/**
 * Key to use in the Bunyan payload to allow users to indicate a trace for the
 * request, and to store as an intermediate value on the log entry before it
 * gets written to the Stackdriver logging API.
 */
export declare const LOGGING_TRACE_KEY = "logging.googleapis.com/trace";
export declare class LoggingBunyan extends Writable {
    private logName;
    private resource;
    private serviceContext;
    private stackdriverLog;
    constructor(options?: types.Options);
    /**
     * Convenience method that Builds a bunyan stream object that you can put in
     * the bunyan streams list.
     */
    stream(level: types.LogLevel): types.StreamResponse;
    /**
     * Format a bunyan record into a Stackdriver log entry.
     */
    private formatEntry_(record);
    /**
     * Intercept log entries as they are written so we can attempt to add the
     * trace ID in the same continuation as the function that wrote the log,
     * because the trace agent currently uses continuation local storage for the
     * trace context.
     *
     * By the time the Writable stream buffer gets flushed and _write gets called
     * we may well be in a different continuation.
     */
    write(record: types.BunyanLogRecord, callback?: Function): boolean;
    write(record: types.BunyanLogRecord, encoding?: string, callback?: Function): boolean;
    /**
     * Relay a log entry to the logging agent. This is called by bunyan through
     * Writable#write.
     */
    _write(record: types.BunyanLogRecord, encoding?: string, callback?: Function): void;
    /**
     * Relay an array of log entries to the logging agent. This is called by
     * bunyan through Writable#write.
     */
    _writev(chunks: Array<{
        chunk: any;
        encoding: string;
    }>, callback?: Function): void;
}
